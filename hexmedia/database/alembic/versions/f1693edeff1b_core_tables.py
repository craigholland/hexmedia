"""core tables

Revision ID: f1693edeff1b
Revises: 
Create Date: 2025-09-29 10:16:26.810273

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f1693edeff1b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('media_item',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('kind', sa.Enum('video', 'image', name='media_kind'), nullable=False),
    sa.Column('media_folder', sa.Text(), nullable=False),
    sa.Column('identity_name', sa.Text(), nullable=False),
    sa.Column('video_ext', sa.String(length=16), nullable=False),
    sa.Column('size_bytes', sa.BigInteger(), server_default=sa.text('0'), nullable=False),
    sa.Column('created_ts', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('modified_ts', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('hash_sha256', sa.String(length=64), nullable=True),
    sa.Column('phash', sa.BigInteger(), nullable=True),
    sa.Column('duration_sec', sa.Integer(), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('fps', sa.Numeric(precision=8, scale=3), nullable=True),
    sa.Column('bitrate', sa.Integer(), nullable=True),
    sa.Column('codec_video', sa.Text(), nullable=True),
    sa.Column('codec_audio', sa.Text(), nullable=True),
    sa.Column('container', sa.Text(), nullable=True),
    sa.Column('aspect_ratio', sa.Text(), nullable=True),
    sa.Column('language', sa.Text(), nullable=True),
    sa.Column('has_subtitles', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('release_year', sa.Integer(), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('watched', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('favorite', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('last_played_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_media_item')),
    sa.UniqueConstraint('hash_sha256', name=op.f('uq_media_item_hash_sha256')),
    sa.UniqueConstraint('media_folder', 'identity_name', 'video_ext', name='uq_mediaitem_folder_identity_ext'),
    schema='hexmedia'
    )
    op.create_index('ix_mediaitem_folder_identity', 'media_item', ['media_folder', 'identity_name'], unique=False, schema='hexmedia')
    op.create_table('person',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('display_name', sa.String(length=255), nullable=False),
    sa.Column('normalized_name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_person')),
    schema='hexmedia'
    )
    op.create_table('tag',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('is_deprecated', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tag')),
    schema='hexmedia'
    )
    op.create_table('media_asset',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('media_item_id', sa.UUID(), nullable=False),
    sa.Column('kind', sa.Enum('poster', 'thumb', 'contact_sheet', 'gif_preview', 'sprite', 'vtx', name='asset_kind'), nullable=False),
    sa.Column('rel_path', sa.Text(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.ForeignKeyConstraint(['media_item_id'], ['hexmedia.media_item.id'], name=op.f('fk_media_asset_media_item_id_media_item'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_media_asset')),
    sa.UniqueConstraint('media_item_id', 'kind', name='uq_media_asset_item_kind'),
    schema='hexmedia'
    )
    op.create_table('media_person',
    sa.Column('media_item_id', sa.UUID(), nullable=False),
    sa.Column('person_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.Enum('actor', 'director', 'other', name='person_role'), server_default=sa.text("'actor'"), nullable=False),
    sa.ForeignKeyConstraint(['media_item_id'], ['hexmedia.media_item.id'], name=op.f('fk_media_person_media_item_id_media_item'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['person_id'], ['hexmedia.person.id'], name=op.f('fk_media_person_person_id_person'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('media_item_id', 'person_id', name=op.f('pk_media_person')),
    schema='hexmedia'
    )
    op.create_table('media_tag',
    sa.Column('media_item_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['media_item_id'], ['hexmedia.media_item.id'], name=op.f('fk_media_tag_media_item_id_media_item'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['hexmedia.tag.id'], name=op.f('fk_media_tag_tag_id_tag'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('media_item_id', 'tag_id', name=op.f('pk_media_tag')),
    schema='hexmedia'
    )
    op.create_table('rating',
    sa.Column('media_item_id', sa.UUID(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('rated_at', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.CheckConstraint('score BETWEEN 1 AND 5', name=op.f('ck_rating_ck_rating_score_1_5')),
    sa.ForeignKeyConstraint(['media_item_id'], ['hexmedia.media_item.id'], name=op.f('fk_rating_media_item_id_media_item'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('media_item_id', name=op.f('pk_rating')),
    schema='hexmedia'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rating', schema='hexmedia')
    op.drop_table('media_tag', schema='hexmedia')
    op.drop_table('media_person', schema='hexmedia')
    op.drop_table('media_asset', schema='hexmedia')
    op.drop_table('tag', schema='hexmedia')
    op.drop_table('person', schema='hexmedia')
    op.drop_index('ix_mediaitem_folder_identity', table_name='media_item', schema='hexmedia')
    op.drop_table('media_item', schema='hexmedia')

    op.execute("DROP TYPE IF EXISTS media_kind;")
    op.execute("DROP TYPE IF EXISTS asset_kind;")
    op.execute("DROP TYPE IF EXISTS person_role;")
    # ### end Alembic commands ###
