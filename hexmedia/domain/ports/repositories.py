from __future__ import annotations
from typing import Iterable, Protocol, Optional, runtime_checkable
from uuid import UUID

from hexmedia.domain.entities.media_item import MediaItem, MediaIdentity
from hexmedia.domain.entities.media_asset import MediaAsset
from hexmedia.domain.entities.media_artifact import Rating, Tag, Person

@runtime_checkable
class MediaQueryPort(Protocol):
    def get_by_id(self, media_item_id: UUID) -> Optional[MediaItem]: ...
    def get_by_identity(self, identity: MediaIdentity) -> Optional[MediaItem]: ...
    def exists_hash(self, sha256: str) -> bool: ...
    def iter_media_folders(self) -> Iterable[str]: ...
    def count_media_items_by_bucket(self) -> dict[str, int]: ...

class MediaMutationPort(Protocol):
    def create_media_item(self, item: MediaItem) -> MediaItem: ...
    def update_media_item(self, item: MediaItem) -> MediaItem: ...
    def delete_media_item(self, media_item_id: UUID) -> None: ...

class MediaAssetWriter(Protocol):
    def add_asset(self, media_item_id: UUID, asset: MediaAsset) -> MediaAsset: ...
    def remove_asset(self, asset_id: UUID) -> None: ...

class ArtifactWriter(Protocol):
    def put_rating(self, media_item_id: UUID, score: int) -> Rating: ...
    def delete_rating(self, media_item_id: UUID) -> None: ...
    def create_tag(self, tag: Tag) -> Tag: ...
    def create_person(self, person: Person) -> Person: ...
